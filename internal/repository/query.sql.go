// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, username, email, password) 
VALUES ($1, $2, $3, $4) 
RETURNING _id, name, username, email, password, role, created_at
`

type CreateUserParams struct {
	Name     string
	Username string
	Email    string
	Password string
}

type CreateUserRow struct {
	ID        uuid.UUID
	Name      string
	Username  string
	Email     string
	Password  string
	Role      string
	CreatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT _id, username, email, password, email_verified, email_verification_token_expires_at 
FROM users 
WHERE email = $1 OR username = $1
`

type GetUserRow struct {
	ID                              uuid.UUID
	Username                        string
	Email                           string
	Password                        string
	EmailVerified                   bool
	EmailVerificationTokenExpiresAt sql.NullTime
}

func (q *Queries) GetUser(ctx context.Context, email string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.EmailVerificationTokenExpiresAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT _id, email_verified, email_verification_token, email_verification_token_expires_at 
FROM users 
WHERE _id = $1
`

type GetUserByIdRow struct {
	ID                              uuid.UUID
	EmailVerified                   bool
	EmailVerificationToken          sql.NullString
	EmailVerificationTokenExpiresAt sql.NullTime
}

func (q *Queries) GetUserById(ctx context.Context, ID uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, ID)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationTokenExpiresAt,
	)
	return i, err
}

const updateUserVerificationExpired = `-- name: UpdateUserVerificationExpired :exec
UPDATE users 
SET email_verification_token = $1, email_verification_token_expires_at = $2 
WHERE _id = $3
`

type UpdateUserVerificationExpiredParams struct {
	EmailVerificationToken          sql.NullString
	EmailVerificationTokenExpiresAt sql.NullTime
	ID                              uuid.UUID
}

func (q *Queries) UpdateUserVerificationExpired(ctx context.Context, arg UpdateUserVerificationExpiredParams) error {
	_, err := q.db.ExecContext(ctx, updateUserVerificationExpired, arg.EmailVerificationToken, arg.EmailVerificationTokenExpiresAt, arg.ID)
	return err
}

const verifyEmail = `-- name: VerifyEmail :exec
UPDATE users 
SET email_verified = true, email_verification_token = NULL, email_verification_token_expires_at = NULL 
WHERE _id = $1
`

func (q *Queries) VerifyEmail(ctx context.Context, ID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, verifyEmail, ID)
	return err
}
